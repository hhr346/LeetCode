'''
给你一个非负整数 x ，计算并返回 x 的 算术平方根 。

由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。

注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。

 

示例 1：

输入：x = 4
输出：2
示例 2：

输入：x = 8
输出：2
解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。
 

提示：

0 <= x <= 231 - 1

不允许用内置函数，而且通过率不到40%
只需要返回整数，是要你造轮子吗？
一个直接的思路是从1开始遍历，计算平方值，一直到大于x了就返回
但是显然这个效率太低
可以考虑用二分？感觉应该可以

二分要考虑一个离散化的问题啊，除以2之后如何返回正确的数值
当到达顶点两个数的时候怎么办？
对于1来说不就有问题了吗？永远都上不去
所以如何保证你这个更新不会落入死循环，更新一定能获得目标更进一步的能力的思考？

这个最后的一个更新咱也不知道是咋回事，防止陷入死循环？
'''

import math
from typing import List
class Solution:
    def mySqrt(self, x: int) -> int:
        i = math.floor(x/2)
        left = 0
        right = x
        while(1):
            if i * i <= x and (i+1) * (i+1) > x:
                return i
            elif i * i > x:
                right = i
                i = math.floor((left+right)/2)
            else:
                left = i
                i = math.ceil((left+right)/2)
