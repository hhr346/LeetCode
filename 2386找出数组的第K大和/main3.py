"""
给你一个整数数组 nums 和一个 正 整数 k 。你可以选择数组的任一 子序列 并且对其全部元素求和。
数组的 第 k 大和 定义为：可以获得的第 k 个 最大 子序列和（子序列和允许出现重复）
返回数组的 第 k 大和 。
子序列是一个可以由其他数组删除某些或不删除元素排生而来的数组，且派生过程不改变剩余元素的顺序。
注意：空子序列的和视作 0 。

示例 1：
输入：nums = [2,4,-2], k = 5
输出：2
解释：所有可能获得的子序列和列出如下，按递减顺序排列：
- 6、4、4、2、2、0、0、-2
数组的第 5 大和是 2 。

示例 2：
输入：nums = [1,-2,3,4,-10,12], k = 16
输出：10
解释：数组的第 16 大和是 10 。
 

提示：
n == nums.length
1 <= n <= 105
-109 <= nums[i] <= 109
1 <= k <= min(2000, 2n)

正确的排序思路应该考虑最大值出现的情况，和其他依次递减的影响力
所以先将所有正数加起来，得到最大的数，再将其他数按照绝对值进行排序，来进行增殖
选择合适的基石

还是不对，对于单个是可以这么做，但是他们还可以排列组合啊，也就是说提前截断可能会影响之后的单个元素插入到之前的排列组合中
同时也可能是之后的排列组合插入到之前的组合中
需要考虑一个严格的截断点：新插入的数值即使是单个也无法影响到前k个数的时候就可以截断了（这个按影响力的排序很重要）
也就是说要解决问题并不要那么多的中间变量，其实很多物理规律也是这样的思路，找到关键点关键参数和关键变量就足够了，作为黑盒如何不断改进自身
如何找到关键变量也很重要，不影响全局的前提下进行变换来更方便的处理
按照事情的重要程度来排序和不断进行改进，从上一个到下一个的不断改进
性能要求太麻烦了，想优化要怎么做啊
"""
from typing import List
import math

class Solution:
    def multipleList(self, before: List[int], add: int) -> List:
        after = before[:]
        for i in before:
            after.append(i+add)
        return after

    def kSum(self, nums: List[int], k: int) -> int:
        top_sum = sum(num for num in nums if num>0)
        # nums_sorted = sorted(nums, key=lambda x:abs(x))
        nums = sorted(nums, key=abs)

        outcome = [top_sum]
        compare = None
        for count in range(len(nums)):
            compare_last = compare
            outcome = self.multipleList(outcome, -abs(nums[count]))
            outcome = sorted(outcome, reverse=True)
            compare = None if len(outcome)<k else outcome[0:k]
            if compare_last is not None:
                sub = [compare[i]-compare_last[i] for i in range(k)]
                print(sub)
            # print(compare)

            if compare == compare_last and compare is not None:
                break
        #     print(outcome)
        # print(outcome)
        print(outcome[k-1])
        return outcome[k-1]

if __name__ == '__main__':
    solution = Solution()
    nums = [1,2,3,4]
    nums, k = [2,4,-2], 5
    nums, k= [1,-2,3,4,-10,12], 16
    nums, k = [153123449,-974739108,-408679566,-996444415,-978921261,805907128,-102259288,-397930077,51033052,-193994032,158654659,-486195972,-294264190,-65262667,375941242,-890038230,315970860,403847239,-32469129,-350561293,192113942,794248972,-632675681,434029943,746632801,500370163,164413366,346449701,473890512], 1906
    nums, k = [1000,1001,1002,1003,1004,1005,1006,1007,1008,1009], 10
    nums, k = [-91282107,-541711002,-276822556,90917395,834041510,-840892824,-508608840,-147048391,557843113,272412766,-918980912,820869808,385517519,-341785025,486628402,993154325,-629135417,677219246,62835597,64218970,928242835,896481126,-738154826,478700010,-893696727,-119562113,-43819130,-987768829,157402884,-386180872,237072809,-919540108,267447436,201913793,-281453262,168068441,690937145,894616338,428922554,355032016,-282793837,-445107592,-559015912,266029154,-245027665,324705364,-727272924,186301685,-905146561,-209906218,111448330,7925324,-103030197,62731785,652384508,242259114,56539784,69378804,190147339,-844137898,-595488526,-731717935,-480766744,767916483,119646172,16969979,906477612,387179801,-845067849,-703297363,816507867,436741820,285885943,-305638994,374442522,-657030826,-770219295,-543436120,612879155,646087640,-403176698,393578994,-155171985,-408422544,-487489088], 1477
    solution.kSum(nums, k)
